import { Component, Directive, TemplateRef, ViewContainerRef } from '@angular/core';
import { ComponentFixture, TestBed, tick } from '@angular/core/testing';
import { DisableDirective } from './disable.directive';
import { PermissionService } from '@app/services/permission.service';

@Component({
  template: `
    <ng-container *disable-elements="{
      hasPermission: ['read'],
      hasPermissionScreen: 'exampleScreen',
      hasPermissionOp: 'AND'
    }">
      <button id="testButton">Click me</button>
    </ng-container>
  `,
})
class TestComponent {}

@Directive({
  selector: '[disable-elements]',
})
class TestDirective extends DisableDirective {
  constructor(
    el: ElementRef,
    templateRef: TemplateRef<any>,
    viewContainer: ViewContainerRef,
    permissionService: PermissionService
  ) {
    super(el, templateRef, viewContainer, permissionService);
  }
}

describe('DisableDirective', () => {
  let fixture: ComponentFixture<TestComponent>;
  let component: TestComponent;
  let permissionServiceSpy: jasmine.SpyObj<PermissionService>;

  beforeEach(() => {
    const spy = jasmine.createSpyObj('PermissionService', ['get allPermissions']);

    TestBed.configureTestingModule({
      declarations: [DisableDirective, TestDirective, TestComponent],
      providers: [{ provide: PermissionService, useValue: spy }],
    });

    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    permissionServiceSpy = TestBed.inject(PermissionService) as jasmine.SpyObj<PermissionService>;
  });

  it('should disable button based on permissions', () => {
    const directiveElement = fixture.debugElement.query(By.directive(TestDirective));

    // Simulate the ngOnInit lifecycle hook
    directiveElement.injector.get(TestDirective).ngOnInit();

    // Trigger change detection
    fixture.detectChanges();
    tick();

    const buttonElement = fixture.debugElement.query(By.css('#testButton')).nativeElement;
    expect(buttonElement.disabled).toBe(true);

    // Simulate changes to permissions
    component['hasPermission'] = ['write'];
    fixture.detectChanges();
    tick();

    expect(buttonElement.disabled).toBe(false);
  });

  afterEach(() => {
    // Clean up resources if needed
  });
});
