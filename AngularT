import { ComponentFixture, TestBed } from '@angular/core/testing';
import { Component } from '@angular/core';
import { DisableDirective } from './disable.directive';
import { PermissionService } from '@app/services/permission.service';

@Component({
  template: `
    <div [disable-elements]="true" [hasPermission]="['read']">
      <button>Click me</button>
    </div>
  `,
})
class TestComponent {}

describe('DisableDirective', () => {
  let fixture: ComponentFixture<TestComponent>;
  let component: TestComponent;
  let permissionServiceSpy: jasmine.SpyObj<PermissionService>;

  beforeEach(() => {
    const spy = jasmine.createSpyObj('PermissionService', ['get allPermissions']);

    TestBed.configureTestingModule({
      declarations: [DisableDirective, TestComponent],
      providers: [{ provide: PermissionService, useValue: spy }],
    });

    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    permissionServiceSpy = TestBed.inject(PermissionService) as jasmine.SpyObj<PermissionService>;
  });

  it('should disable button based on permissions', () => {
    const directiveElement = fixture.debugElement.query(By.directive(DisableDirective));

    // Simulate the ngOnInit lifecycle hook
    directiveElement.injector.get(DisableDirective).ngOnInit();

    // Trigger change detection
    fixture.detectChanges();

    const buttonElement = fixture.debugElement.query(By.css('button')).nativeElement;
    expect(buttonElement.disabled).toBe(true);

    // Simulate changes to permissions
    component['hasPermission'] = ['write'];
    fixture.detectChanges();

    expect(buttonElement.disabled).toBe(false);
  });

  afterEach(() => {
    // Clean up resources if needed
  });
});
