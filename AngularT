// Handle Add Node in Parallel or Sequential
const handleAddNode = (type, parentKey) => {
  if (nodeCount < availableServices.length) {
    const newService = availableServices.find(
      (service) => !selectedServices.includes(service)
    );

    const newNode = {
      key: Date.now(),
      label: newService,
      type: type,
      level: 0,
      children: [],
    };

    // Function to add a node at the correct location in the tree
    const addNodeToTree = (nodes, parentKey, parentLevel) => {
      let updatedNodes = [];
      nodes.forEach((node) => {
        if (node.key === parentKey) {
          if (type === 'parallel') {
            // Add the new node as a sibling (at the same level as the parent)
            newNode.level = parentLevel;
            updatedNodes.push(node); // Keep the original parent node
            updatedNodes.push(newNode); // Add the new parallel node as a sibling
          } else if (type === 'sequential') {
            // Add the new node as a child (increment level by 1)
            newNode.level = parentLevel + 1;
            node.children.push(newNode);
            updatedNodes.push(node);
          }
        } else {
          // Recursively add to child nodes if necessary
          node.children = addNodeToTree(node.children, parentKey, node.level);
          updatedNodes.push(node);
        }
      });
      return updatedNodes;
    };

    setTreeData(addNodeToTree(treeData, parentKey, 0));
    setSelectedServices([...selectedServices, newService]);
    setNodeCount((prevCount) => prevCount + 1);
  }
};
