
import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';


export class YourComponent implements OnInit {
  formGroup: FormGroup;

  ngOnInit() {
    this.formGroup = new FormGroup({
      ipc: new FormControl('', Validators.required),
      responseCode: new FormControl('', Validators.required),
      description: new FormControl(''),
      statusCode: new FormControl('')
    });
  }
}

<div class="row mt-3" *ngFor="let item of responseCodeList; let i = index" [formGroup]="formGroup">
  <div class="col-md-3">
    <ng-select [class.input-valid]="formGroup.get('ipc').valid && error" bindLabel="value" appendTo="body" [clearable]="false" bindValue="value"
      [items]="internalCodeList" formControlName="ipc" [disabled]="readOnlyFlag" placeholder="Select Internal code">
    </ng-select>
    <span class="error" *ngIf="formGroup.get('ipc').hasError('required') && error">Please select internal code</span>
  </div>
  <div class="col-md-2">
    <input [class.not-valid]="formGroup.get('responseCode').invalid && error" class="form-control" formControlName="responseCode" type="text" [disabled]="readOnlyFlag"
      (keydown)="validateResCode($event)" placeholder="Enter Value" />
    <span class="error" *ngIf="formGroup.get('responseCode').hasError('required') && error">Please enter response code</span>
  </div>
  <div class="col-md-3">
    <input class="form-control" formControlName="description" type="text" [disabled]="readOnlyFlag" placeholder="Enter Value" (keydown)="validateResCode($event)" />
  </div>
  <div class="col-md-2">
    <input class="form-control" formControlName="statusCode" type="text" [disabled]="readOnlyFlag" placeholder="Enter Value" (keydown)="validateResCode($event)" />
  </div>
  <div class="col-md-2">
    <span *ngIf="this.responseCodeList.length > 1 && !readOnlyFlag" class="btn btn-default" (click)="pullresponseCodeItem(i)"><i class="fa fa-minus"></i></span>
  </div>
</div>




























q
 updateval = updateval.substr(0, updateval.length - 1);
'substr' is deprecated. A legacy feature for browser compatibility
ans
public aphaNumeric = new RegExp('^[0-9a-zA-Z ]+$');
Use a regular expression literal instead of the 'RegExp' constructor

public aphaNumeric = /^[0-9a-zA-Z ]+$/;



q
 public reg = new RegExp('^[0-9]+$');
 Use a regular expression literal instead of the 'RegExp' constructor.
ans
public reg = /^[0-9]+$/;


q
Use concise character class syntax '\d' instead of '[0-9]
ans
\d

q
 public aphaWithdot = new RegExp('^[a-zA-Z_.]+$');
Use a regular expression literal instead of the 'RegExp' constructor.
ans public aphaWithdot = /^[a-zA-Z_.]+$/;


q

 public aphaNumericLike = new RegExp('^[0-9a-zA-Z%]+$');
ans public aphaNumericLike = /^[0-9a-zA-Z%]+$/;
Q
 public aphaNumeric = new RegExp('^[0-9a-zA-Z_ ]+$');
ans public aphaNumeric = /^[0-9a-zA-Z_ ]+$/;

