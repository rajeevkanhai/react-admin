import { ComponentFixture, TestBed } from '@angular/core/testing';
import { Component, DebugElement } from '@angular/core';
import { By } from '@angular/platform-browser';
import { NumberDirective } from './number.directive';

@Component({
  template: `
    <input type="text" numbersOnly [(ngModel)]="inputValue" />
  `
})
class TestComponent {
  inputValue: string = '';
}

describe('NumberDirective', () => {
  let fixture: ComponentFixture<TestComponent>;
  let component: TestComponent;
  let inputEl: DebugElement;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [NumberDirective, TestComponent]
    });

    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    inputEl = fixture.debugElement.query(By.directive(NumberDirective));
  });

  it('should create the component', () => {
    expect(component).toBeTruthy();
  });

  it('should restrict input to numbers only', () => {
    const input = inputEl.nativeElement;

    // Simulate user input
    input.value = 'abc123def456';
    input.dispatchEvent(new Event('input'));

    // Expect the input value to be stripped of non-numeric characters
    expect(input.value).toBe('123456');
  });

  it('should not stop event propagation if input is unchanged', () => {
    const input = inputEl.nativeElement;

    // Simulate user input with no change
    input.value = '123';
    input.dispatchEvent(new Event('input'));

    // Expect the input value to remain the same
    expect(input.value).toBe('123');
  });

  it('should stop event propagation if input is changed', () => {
    const input = inputEl.nativeElement;

    // Simulate user input with a change
    input.value = 'abc123def456';
    input.dispatchEvent(new Event('input'));

    // Expect the input value to be stripped of non-numeric characters
    expect(input.value).toBe('123456');
  });
});
