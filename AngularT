import { ComponentFixture, TestBed, ComponentFixtureAutoDetect, waitForAsync } from '@angular/core/testing';
import { Component, DebugElement } from '@angular/core';
import { By } from '@angular/platform-browser';
import { Subject } from 'rxjs';
import { HasPermissionDirective } from './has-permission.directive';
import { PermissionService } from '@app/services/permission.service';

// Dummy component for testing the directive
@Component({
  template: `
    <ng-container *hasPermission="['read']" [hasPermissionScreen]="1" [hasPermissionOp]="'AND'">
      <div id="content">Content</div>
    </ng-container>
  `,
})
class TestComponent {}

describe('HasPermissionDirective', () => {
  let component: TestComponent;
  let fixture: ComponentFixture<TestComponent>;
  let debugElement: DebugElement;

  beforeEach(waitForAsync(() => {
    TestBed.configureTestingModule({
      declarations: [HasPermissionDirective, TestComponent],
      providers: [PermissionService, { provide: ComponentFixtureAutoDetect, useValue: true }],
    }).compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    component = fixture.componentInstance;
    debugElement = fixture.debugElement;
  });

  it('should create the component', () => {
    expect(component).toBeTruthy();
  });

  it('should display content when permissions are valid with logical AND', () => {
    // Arrange
    const permissionService = TestBed.inject(PermissionService);
    permissionService.allPermissions = [{ id: 1, read: true }];

    // Act
    fixture.detectChanges();

    // Assert
    const contentElement = debugElement.query(By.css('#content'));
    expect(contentElement).toBeTruthy();
    expect(contentElement.nativeElement.textContent).toContain('Content');
  });

  it('should not display content when permissions are not valid with logical AND', () => {
    // Arrange
    const permissionService = TestBed.inject(PermissionService);
    permissionService.allPermissions = [{ id: 1, read: false }];

    // Act
    fixture.detectChanges();

    // Assert
    const contentElement = debugElement.query(By.css('#content'));
    expect(contentElement).toBeFalsy();
  });

  it('should display content when permissions are valid with logical OR', () => {
    // Arrange
    const permissionService = TestBed.inject(PermissionService);
    permissionService.allPermissions = [{ id: 1, read: false, write: true }];

    // Act
    fixture.detectChanges();

    // Assert
    const contentElement = debugElement.query(By.css('#content'));
    expect(contentElement).toBeTruthy();
    expect(contentElement.nativeElement.textContent).toContain('Content');
  });

  it('should not display content when permissions are not valid with logical OR', () => {
    // Arrange
    const permissionService = TestBed.inject(PermissionService);
    permissionService.allPermissions = [{ id: 1, read: false, write: false }];

    // Act
    fixture.detectChanges();

    // Assert
    const contentElement = debugElement.query(By.css('#content'));
    expect(contentElement).toBeFalsy();
  });

  // Add more test cases as needed to cover different scenarios and edge cases
});
