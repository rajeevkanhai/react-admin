import { TestBed, ComponentFixture, async } from '@angular/core/testing';
import { Component, DebugElement } from '@angular/core';
import { By } from '@angular/platform-browser';
import { NumbersOnlyDirective } from './numbers-only.directive';

// Create a test component for the directive
@Component({
  template: `
    <input appNumbersOnly [(ngModel)]="inputValue" />
  `,
})
class TestComponent {
  inputValue: string;
}

describe('NumbersOnlyDirective', () => {
  let fixture: ComponentFixture<TestComponent>;
  let testComponent: TestComponent;
  let inputElement: HTMLInputElement;
  let directiveElement: DebugElement;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [TestComponent, NumbersOnlyDirective],
    }).compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    testComponent = fixture.componentInstance;
    inputElement = fixture.debugElement.query(By.directive(NumbersOnlyDirective)).nativeElement;
    directiveElement = fixture.debugElement.query(By.directive(NumbersOnlyDirective));
    fixture.detectChanges();
  });

  it('should create the directive', () => {
    expect(directiveElement).toBeTruthy();
  });

  it('should allow only numbers in the input', () => {
    // Simulate typing a valid number
    inputElement.value = '123';
    inputElement.dispatchEvent(new Event('input'));

    // Check if the value is updated correctly
    expect(testComponent.inputValue).toEqual('123');
  });

  it('should prevent input of non-numeric characters', () => {
    // Simulate typing a non-numeric character
    inputElement.value = 'abc';
    inputElement.dispatchEvent(new Event('input'));

    // Check if the value is not updated (non-numeric character is prevented)
    expect(testComponent.inputValue).toBeUndefined();
  });

  // Add more test cases based on your requirements

  afterEach(() => {
    fixture.destroy();
  });
});
