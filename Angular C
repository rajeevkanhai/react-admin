import { Directive, Input, TemplateRef, ViewContainerRef, OnInit } from '@angular/core';
import { PermissionService } from '@app/services/permission.service';
import { Subject } from 'rxjs';

@Directive({
  // eslint-disable-next-line @angular-eslint/directive-selector
  selector: '[hasPermission]',
})
export class HasPermissionDirective implements OnInit {
  private isHidden = true;
  permissions: any = [];
  permissionObject: any;
  permissionScreenId: any;
  logicalOp: string = 'AND';
  componetDestroyed = new Subject();

  constructor(
    private templateRef: TemplateRef<any>,
    private viewContainer: ViewContainerRef,
    private permissionService: PermissionService,
  ) {}

  ngOnInit() {
    if (this.permissionService.allPermissions) {
      const foundPermission = this.permissionService.allPermissions.find(
        item => item.id === this.permissionScreenId,
      );
      this.permissionObject = foundPermission;
      if (this.permissionObject) {
        this.updateView();
      }
    }
  }

  @Input()
  set hasPermission(val) {
    this.permissions = val;
    if (this.permissionObject) {
      this.updateView();
    }
  }

  @Input()
  set hasPermissionScreen(permScreen) {
    this.permissionScreenId = permScreen;
    if (this.permissionObject) {
      this.updateView();
    }
  }

  @Input()
  set hasPermissionOp(permop) {
    this.logicalOp = permop;
    if (this.permissionObject) {
      this.updateView();
    }
  }

  private updateView() {
    if (this.checkPermission()) {
      if (this.isHidden) {
        this.viewContainer.createEmbeddedView(this.templateRef);
        this.isHidden = false;
      }
    } else {
      this.isHidden = true;
      this.viewContainer.clear();
    }
  }

  private checkPermission() {
    let hasPermission = false;
    if (this.permissions.length) {
      for (const checkPermission of this.permissions) {
        if (this.permissionObject && this.permissionObject[checkPermission]) {
          hasPermission = true;
          if (this.logicalOp === 'OR') {
            break;
          }
        } else {
          hasPermission = false;
          if (this.logicalOp === 'AND') {
            break;
          }
        }
      }
    }
    return hasPermission;
  }

  ngOnDestroy() {
    this.componetDestroyed.next();
    this.componetDestroyed.complete();
    this.componetDestroyed.unsubscribe();
  }
}
