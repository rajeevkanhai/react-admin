const handleIncludeExclude = (key, include) => {
  setDataSource((prevData) => {
    const excludedItem = prevData.find(item => item.key === key);
    
    if (!excludedItem) return prevData; // If the item isn't found, return the data as is

    let maxPriority = Math.max(...prevData.map(item => item.priority));

    return prevData
      .map((item) => {
        if (item.key === key) {
          if (include) {
            // If including, assign the next highest priority
            return { ...item, priority: maxPriority + 1 };
          } else {
            // If excluding, reset priority to 0
            return { ...item, priority: 0 };
          }
        } else if (item.priority > excludedItem.priority) {
          // Decrease the priority of rows with a higher priority than the excluded item
          return { ...item, priority: item.priority - 1 };
        }
        return item;
      })
      // Sort data by priority, with priority 0 at the bottom
      .sort((a, b) => {
        if (a.priority === 0) return 1; // Push rows with priority 0 to the bottom
        if (b.priority === 0) return -1;
        return a.priority - b.priority; // Sort by ascending priority
      });
  });
};
