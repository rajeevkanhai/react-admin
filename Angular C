const handleNodeAction = (actionType, event, node, key) => { event?.preventDefault(); // Prevent default behavior if event exists // Common logic to update node state const setNodeState = (node) => { setCurrentItem(node); setSelectedItem(node); setSelectedNodeKey(node?.key); }; switch (actionType) { case 'select': if (!node || !node.type || !key) return; setSelectedNodeKey(key[0]); setShowEditPropertiesBtn(true); setEditProperties(false); setSegment('VIEW_FIELD'); setCurrentItem(node); const { name, type, fieldsType, ...rest } = node; setFormFields({ name, type, fieldsType, ...rest }); break; case 'rightClick': setOverflow('hidden'); if (node) setNodeState(node); if (menuRef.current) { const { left, top } = menuRef.current.getBoundingClientRect(); setContextMenuPosition({ x: event.clientX - left, y: event.clientY - top + menuRef.current.scrollTop, }); } setContextMenuVisible(true); break; case 'contextMenuClick': setEditProperties(true); setCurrentContextMenu(key); let updatedTypeList = [...typeList]; switch (key) { case 'add_nested_field': case 'add_single_field': updatedTypeList = updatedTypeList.filter(type => type === 'SIMPLE' || type === 'LIST'); setTypeList(updatedTypeList); showEmptyForm({ type: 'field', fieldType: 'field', fieldsType: 'fieldType', name: '' }, 'fields'); break; case 'remove_field': deleteFields(node); break; case 'VIEW_FIELD': setCurrentItem(node); break; default: break; } setContextMenuVisible(false); break; default: break; } };



onSelect={(selectedKeys, event, node) => handleNodeAction('select', event, node, selectedKeys)} onRightClick={(event, node) => handleNodeAction('rightClick', event, node)} onContextMenuClick={({ key, node }) => handleNodeAction('contextMenuClick', null, node, key)}
