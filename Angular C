import React from 'react';
import { Form, Input, Button, Card } from 'antd';

const jsonSchema = {
  variables: [
    {
      Name: 'test'
    }
  ],
  database: [
    {
      name: 'db',
      variables: [
        {
          Hostname: 'value',
          Username: 'value',
          Port: 'value'
        }
      ]
    },
    {
      name: 'ddb',
      variables: [
        {
          Hostname: 'value',
          TableName: 'value'
        }
      ]
    }
  ]
};

const renderFormFields = (variables, parentName = '') => {
  return variables.map((variable, index) => {
    return Object.keys(variable).map((key) => (
      <Form.Item
        key={`${parentName}_${index}_${key}`}
        label={key}
        name={`${parentName}_${index}_${key}`}
        rules={[
          {
            required: true,
            message: `Please input ${key}!`
          }
        ]}
      >
        <Input placeholder={variable[key]} />
      </Form.Item>
    ));
  });
};

const DynamicForm = () => {
  const [form] = Form.useForm();

  const handleFinish = (values) => {
    console.log('Form values:', values);
  };

  return (
    <Form form={form} onFinish={handleFinish} layout="vertical">
      <Card title="Variables">
        {renderFormFields(jsonSchema.variables)}
      </Card>

      {jsonSchema.database.map((db, dbIndex) => (
        <Card key={`db_${dbIndex}`} title={`Database: ${db.name}`}>
          {renderFormFields(db.variables, db.name)}
        </Card>
      ))}

      <Form.Item>
        <Button type="primary" htmlType="submit">
          Submit
        </Button>
      </Form.Item>
    </Form>
  );
};

export default DynamicForm;









let fileName = 'downloaded_file';

      if (contentDisposition && contentDisposition.indexOf('attachment') !== -1) {
        const fileNameMatch = contentDisposition.match(/filename="(.+)"/);
        if (fileNameMatch.length === 2) {
          fileName = fileNameMatch[1];
        }
      }









import React, { useState } from 'react';
import { Table, Input, Button, Form, Popconfirm } from 'antd';
import { PlusOutlined } from '@ant-design/icons';

const EditableTable = () => {
  const [dataSource, setDataSource] = useState([]);
  const [count, setCount] = useState(0);

  const EditableCell = ({ title, editable, children, dataIndex, record, handleSave, ...restProps }) => {
    const [editing, setEditing] = useState(false);
    const [form] = Form.useForm();

    const toggleEdit = () => {
      setEditing(!editing);
      form.setFieldsValue({ [dataIndex]: record[dataIndex] });
    };

    const save = async () => {
      try {
        const values = await form.validateFields();
        toggleEdit();
        handleSave({ ...record, ...values });
      } catch (errInfo) {
        console.log('Save failed:', errInfo);
      }
    };

    let childNode = children;

    if (editable) {
      childNode = editing ? (
        <Form.Item
          style={{ margin: 0 }}
          name={dataIndex}
          rules={[
            {
              required: true,
              message: `${title} is required.`,
            },
          ]}
        >
          <Input onPressEnter={save} onBlur={save} />
        </Form.Item>
      ) : (
        <div
          className="editable-cell-value-wrap"
          style={{ paddingRight: 24 }}
          onClick={toggleEdit}
        >
          {children}
        </div>
      );
    }

    return <td {...restProps}>{childNode}</td>;
  };

  const handleAdd = () => {
    const newData = {
      key: count,
      name: '',
      description: '',
    };
    setDataSource([...dataSource, newData]);
    setCount(count + 1);
  };

  const handleDelete = (key) => {
    const newData = dataSource.filter((item) => item.key !== key);
    setDataSource(newData);
  };

  const handleSave = (row) => {
    const newData = [...dataSource];
    const index = newData.findIndex((item) => row.key === item.key);
    const item = newData[index];
    newData.splice(index, 1, { ...item, ...row });
    setDataSource(newData);
  };

  const columns = [
    {
      title: 'Name',
      dataIndex: 'name',
      editable: true,
    },
    {
      title: 'Description',
      dataIndex: 'description',
      editable: true,
    },
    {
      title: 'Operation',
      dataIndex: 'operation',
      render: (_, record) =>
        dataSource.length >= 1 ? (
          <Popconfirm title="Sure to delete?" onConfirm={() => handleDelete(record.key)}>
            <Button danger>Delete</Button>
          </Popconfirm>
        ) : null,
    },
  ];

  const mergedColumns = columns.map((col) => {
    if (!col.editable) {
      return col;
    }
    return {
      ...col,
      onCell: (record) => ({
        record,
        editable: col.editable,
        dataIndex: col.dataIndex,
        title: col.title,
        handleSave: handleSave,
      }),
    };
  });

  return (
    <div>
      <Button
        onClick={handleAdd}
        type="primary"
        style={{
          marginBottom: 16,
        }}
        icon={<PlusOutlined />}
      >
        Add a row
      </Button>
      <Table
        components={{
          body: {
            cell: EditableCell,
          },
        }}
        bordered
        dataSource={dataSource}
        columns={mergedColumns}
        rowClassName="editable-row"
        pagination={false}
      />
    </div>
  );
};

export default EditableTable;
