// disable.directive.spec.ts
import { TestBed, ComponentFixture } from '@angular/core/testing';
import { Component } from '@angular/core';
import { DisableDirective } from './disable.directive';

@Component({
  template: '<button [appDisable]="isDisabled">Click me</button>'
})
class TestComponent {
  isDisabled = false;
}

describe('DisableDirective', () => {
  let fixture: ComponentFixture<TestComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [TestComponent, DisableDirective]
    });

    fixture = TestBed.createComponent(TestComponent);
    fixture.detectChanges(); // Trigger initial data binding
  });

  it('should disable the button', () => {
    const buttonElement: HTMLButtonElement = fixture.nativeElement.querySelector('button');

    expect(buttonElement.disabled).toBeFalsy(); // Initially not disabled

    fixture.componentInstance.isDisabled = true;
    fixture.detectChanges(); // Trigger change detection

    expect(buttonElement.disabled).toBeTruthy(); // After setting isDisabled to true, the button should be disabled
  });

  it('should enable the button', () => {
    const buttonElement: HTMLButtonElement = fixture.nativeElement.querySelector('button');

    // Set isDisabled to true initially
    fixture.componentInstance.isDisabled = true;
    fixture.detectChanges();

    expect(buttonElement.disabled).toBeTruthy(); // Initially disabled

    fixture.componentInstance.isDisabled = false;
    fixture.detectChanges(); // Trigger change detection

    expect(buttonElement.disabled).toBeFalsy(); // After setting isDisabled to false, the button should be enabled
  });
});
