import { TestBed, ComponentFixture, async } from '@angular/core/testing';
import { Component, DebugElement } from '@angular/core';
import { DisableDirective } from './disable.directive';
import { By } from '@angular/platform-browser';

// Create a test component for the directive
@Component({
  template: `
    <div disable-elements [hasPermission]="permissions" [hasPermissionScreen]="permissionScreen" [hasPermissionOp]="permissionOp">
      <button id="testButton">Click me</button>
    </div>
  `,
})
class TestComponent {
  permissions: string[] = ['read'];
  permissionScreen: string = 'someScreen';
  permissionOp: string = 'AND';
}

describe('DisableDirective', () => {
  let fixture: ComponentFixture<TestComponent>;
  let testComponent: TestComponent;
  let directiveElement: DebugElement;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [TestComponent, DisableDirective],
    }).compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(TestComponent);
    testComponent = fixture.componentInstance;
    directiveElement = fixture.debugElement.query(By.directive(DisableDirective));
    fixture.detectChanges();
  });

  it('should create the directive', () => {
    expect(directiveElement).toBeTruthy();
  });

  it('should disable button based on permissions', () => {
    const buttonElement: HTMLButtonElement = fixture.debugElement.query(By.css('#testButton')).nativeElement;

    // Initially, the button should not be disabled
    expect(buttonElement.disabled).toBeFalsy();

    // Change permissions and trigger change detection
    testComponent.permissions = ['write'];
    fixture.detectChanges();

    // Now, the button should be disabled based on the new permissions
    expect(buttonElement.disabled).toBeTruthy();
  });

  // Add more test cases based on your requirements

  afterEach(() => {
    fixture.destroy();
  });
});
