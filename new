import { useEffect, useState } from 'react';
import { Button, Dropdown, Select, Card } from 'antd';
import { DownOutlined } from '@ant-design/icons';
import './AddService.css';
import { WORKFLOWAPI } from '../../../../services/workflow';
const { Option } = Select;

const AddService = (props) => {
  const [loading, setLoading] = useState(false);
  const [availableServices, setAvailableServices] = useState([]);
  const [treeData, setTreeData] = useState([]);
  const [selectedServices, setSelectedServices] = useState([]);
  const [nodeCount, setNodeCount] = useState(0);

  // Helper function to recursively get all services from deleted nodes
  const getDeletedServices = (node) => {
    let services = [];
    if (node.label) services.push(node.label);
    if (node.children.length > 0) {
      node.children.forEach((child) => {
        services = [...services, ...getDeletedServices(child)];
      });
    }
    return services;
  };

  // Handle Add Service
  const handleAddService = () => {
    if (nodeCount < availableServices.length) {
      const newService = availableServices.find(
        (service) => !selectedServices.includes(service)
      );
      const newNode = {
        key: Date.now(),
        label: newService,
        type: 'parallel',
        // type: 'root',
        level: 0,
        children: [],
      };
      setTreeData([...treeData, newNode]);
      setSelectedServices([...selectedServices, newService]);
      setNodeCount(1);

    }
  };

  useEffect(() => {
    getServiceList();
  }, []);

  useEffect(() => {
    if (treeData.length) {
      props.addService(treeData);
    }
  }, [treeData]);

  const getServiceList = async () => {
    const response = await WORKFLOWAPI.serviceList();
    setAvailableServices(response.data.servicelist);
  }

  const transformData = (data) => {
    return data.map(item => {
      const transformedData = {
        key: item.id,
        label: item.serviceName,
        type: 'parallel',
        level: 0,
        children: item.services ? transformChildData(item.services) : []
      }
      return transformedData;
    }
    );
  }

  const transformChildData = (data) => {
    return data.map(item => {
      const transformedData = {
        key: item.id,
        label: item.serviceName,
        type: 'sequential',
        level: 0,
        children: item.services ? transformData(item.services) : []
      }
      return transformedData;
    });
  }

  const extractLabels = (nodes) => {
    let labels = [];
    nodes.forEach(node => {
      labels.push(node.label);
      if (node.children) {
        labels = labels.concat(extractLabels(node.children));
      }
    });
    return labels;
  }


  useEffect(() => {
    if (props.editTreeData.length > 0) {
      setLoading(true);
      setTreeData([]);
      setSelectedServices([]);
      const tree = transformData(props.editTreeData);
      setTreeData(tree);
      const editSelectedData = extractLabels(tree);
      setSelectedServices(...selectedServices, editSelectedData);
      setLoading(false);
    }
  }, [props.editTreeData.length > 0]);


  // Handle Add Node in Parallel or Sequential
  const handleAddNode = (type, parentKey) => {
    if (nodeCount < availableServices.length) {
      // if(treeData.length ==1 ){
      //   handleAddService();
      // }
      const newService = availableServices.find(
        (service) => !selectedServices.includes(service)
      );
  
      const newNode = {
        key: Date.now(),
        label: newService,
        type: type,
        level: 0,
        children: [],
      };

      const addNodeToTree = (nodes, parentKey, parentLevel) => {
        return nodes.map((node) => {
          if (node.key === parentKey) {
            if (type === 'parallel') {
              newNode.level = parentLevel;
              node.children.push(newNode);
            } else if (type === 'sequential') {
              newNode.level = parentLevel + 1;
              node.children.push(newNode);
            }
          } else if (node.children.length > 0) {
            node.children = addNodeToTree(node.children, parentKey, node.level);
          }
          return node;
        });
      };

      setTreeData(addNodeToTree(treeData, parentKey, 0));
      setSelectedServices([...selectedServices, newService]);
      setNodeCount((prevCount) => prevCount + 1);
    }
  };

  // Handle Delete Node
  const handleDeleteNode = (key) => {
    const deleteNodeFromTree = (nodes, key) => {
      return nodes.filter((node) => {
        if (node.key === key) {
          const deletedServices = getDeletedServices(node);
          setSelectedServices((prev) =>
            prev.filter((service) => !deletedServices.includes(service))
          );
          setNodeCount((prevCount) => prevCount - deletedServices.length);
          return false;
        }
        if (node.children.length > 0) {
          node.children = deleteNodeFromTree(node.children, key);
        }
        return true;
      });
    };

    setTreeData(deleteNodeFromTree(treeData, key));
  };

  // Handle Service Selection
  const handleSelectService = (key, value) => {
    const updateServiceLabel = (nodes, key, value) => {
      return nodes.map((node) => {
        if (node.key === key) {
          if (node.label === null) {
            setSelectedServices([...selectedServices, value]);
          } else {
            const updatedServices = selectedServices.map((service) =>
              service === node.label ? value : service
            );
            setSelectedServices(updatedServices);
          }
          node.label = value;
        } else if (node.children.length > 0) {
          node.children = updateServiceLabel(node.children, key, value);
        }
        return node;
      });
    };

    setTreeData(updateServiceLabel(treeData, key, value));
  };

  // Menu for Actions
  const menu = (node) => ({

    items: [
      {
        key: 1,
        label: 'Add Parallel',
         onClick: () => handleAddService(),
       // onClick: () => handleAddNode('parallel', node.key),
        disabled:
          !node.label || selectedServices.length >= availableServices.length

      },
      {
        key: 2,
        label: 'Add Sequential',
        onClick: () => handleAddNode('sequential', node.key),
        disabled:
          !node.label || selectedServices.length >= availableServices.length

      },
      {
        key: 3,
        label: 'Delete',
        onClick: () => handleDeleteNode(node.key),
      }

    ]
  });

  // Render Tree Nodes
  const renderTreeNodes = (nodes) =>
    nodes.map((node) => (
      <div key={node.key} className={`tree-node ${node.type}`}>
        <Card 
          title={
            <Select 
              style={{ width: 200 }}
              placeholder="Select Service"
              value={node.label !== null ? node.label : undefined}
              onChange={(value) => handleSelectService(node.key, value)}

            >
              {availableServices
                .filter((service) => !selectedServices.includes(service))
                .map((service) => (
                  <Option key={service} value={service}>
                    {service}
                  </Option>
                ))}
            </Select>
          }
          extra={
            <Dropdown menu={menu(node)} trigger={['click']} >
              <a onClick={(e) => e.preventDefault()}>
                Actions <DownOutlined />
              </a>
            </Dropdown>
          }
          style={{ marginBottom: '20px' }}
        >
          {node.children.length > 0 && (
            <div className={`children ${node.type}`}>
              {renderTreeNodes(node.children)}
            </div>
          )}
        </Card>
      </div>
    ));

  return (
    <div loading={loading}>
      {/* {JSON.stringify(nodeCount)} */}
      {/* {JSON.stringify(selectedServices)} */}
      {/* {JSON.stringify(transformedData)}  */}
      {/* {JSON.stringify(treeData)} */}
      <div>
        {treeData.length < 1 && nodeCount < availableServices.length && (
          <Button className="jpmc-bg-color btn" onClick={handleAddService} style={{ marginLeft: '10px' }}>
            Add Service
          </Button>
        )}
      </div>
      {renderTreeNodes(treeData)}
    </div>
  );
};

export default AddService;
